#-----------------------------------------------------------------------------#
#                                                                             #
# HOMY - HOME ASSISTANT - ALVAREA 2020                                        #
#                                                                             #
#-----------------------------------------------------------------------------#
# TEMPLATING JINJA2:  https://jinja.palletsprojects.com/en/master/templates

#-----------------------------------------------------------------------------#
#                                                                             #
# ARRANQUE/PARADA DEL SISTEMA                                                 #
#                                                                             #
#-----------------------------------------------------------------------------#
- id: hass_startup_automation
  alias: hass_startup_scripts
  trigger:
    platform: homeassistant
    # Event can also be 'shutdown'
    event: start
  action:
    # Para todas las reglas durante el arranque del sistema
    - service: automation.turn_off
      data:
        entity_id:
          - group.all_automations

    # Llamada al script de inicialización de interruptores Sonoff
    - service: script.sonoff_initialize
    #
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople
    #
    # 30" espera y arranca reglas
    - delay: 30
    - service: automation.turn_on
      data:
        entity_id:
          - group.all_automations

    # 30" y actualiza certificado
    #- delay: 30
    #- service: homeassistant.update_entity
    #  entity_id: sensor.ssl_certificate_expiry

#-----------------------------------------------------------------------------#
#                                                                             #
# TAREAS DIARIAS DEL SISTEMA                                                  #
#                                                                             #
#-----------------------------------------------------------------------------#
- id: hass_daily_automations
  alias: 'HA daily automations'
  trigger:
    - platform: time
      at:
        - '11:10:00'
        - '23:55:00'
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.xiaomi_volume_alarm_armed
        value: >-
          {% if (now().hour == 11) %} 10
          {% elif (now().hour == 23) %} 2
          {% endif %}
    - service: input_number.set_value
      data_template:
        entity_id: input_number.xiaomi_volume_alarm_disarmed
        value: >-
          {% if (now().hour == 11) %} 10
          {% elif (now().hour == 23) %} 2
          {% endif %}

- id: hass_clock_notify
  alias: 'HASS Clock Notify'
  trigger:
    - platform: time
      at:
        - '13:00:00'
        - '13:45:00'
        - '14:30:00'
        - '21:30:00'
  action:
    # Script Envío Sonido Alexa Alexa
    - service: script.alexa_secuencia
      data_template:
        sonido: 'clock_01'
        repeticion: 1
        voz: >
          {% if now().hour == 13 and now().minute == 00 %}
            "Buenos días. Son las {{ now().hour }}, es la hora de un aperitivo"
          {% elif now().hour == 13 and now().minute == 45 %}
            "Buenas tardes. Son las {{ now().hour }} y {{ now().minute }}, es la hora de preparar la comida"
          {% elif now().hour == 14 and now().minute == 30 %}
            "Buenas tardes. Son las {{ now().hour }} y {{ now().minute }}, es la hora del almuerzo"
          {% elif now().hour ==21 %}
            "Buenas noches. Son las {{ now().hour }} y {{ now().minute }}, es la hora de preparar la cena"
          {% endif %}

- id: hass_blink_update
  alias: 'BLINK Camera Update'
  trigger:
    - platform: time
      at:
        - '08:00:00'
        - '10:00:00'
        - '12:00:00'
        - '14:00:00'
        - '16:00:00'
        - '18:00:00'
        - '20:00:00'
        - '22:00:00'
        - '00:00:00'
  action:
    # Actualizacion imagen cámaras última hora.
    - service: script.blink_trigger_cam_entrada
    - delay: 00:00:05
    - service: script.blink_trigger_cam_puerta_principal
    - delay: 00:00:05
    - service: script.blink_trigger_cam_puerta_garaje

#-----------------------------------------------------------------------------#
#                                                                             #
# ALARMA: Armado y Control de la Alarma                                       #
#                                                                             #
#-----------------------------------------------------------------------------#

# REGLAS: TEST SONIDOS ALARMA
#
- id: X0_test
  alias: 'X0 TEST ON'
  trigger:
    - platform: state
      entity_id: input_boolean.alarm_test_sirenas
      from: 'off'
      to: 'on'
  action:
    # Micro Aviso Sirena Interior
    - service: script.sirena_alarma_micro_aviso

#
# ALARMA AUTOMATICA SENSOR HUMO COCINA
#
- id: X1_alarma_humo_cocina
  alias: 'X1 Alarma Humo Cocina'
  trigger:
    - platform: state
      entity_id: binary_sensor.smoke_sensor_158d0001fd321c
      from: 'off'
      to: 'on'
  action:
    # Micro Aviso Sirena Interior
    - service: script.sirena_alarma_micro_aviso

    # Script Envío Sonido Alexa Alexa
    - service: script.alexa_secuencia
      data_template:
        sonido: "{{ states('input_select.alarma_sonido_disparado') }}"
        repeticion: 5
        voz: 'ATENCION! ¡ALARMA HUMO COCINA!. Sensor Humo Cocina. ¡ATENCION! ¡ALARMA!'

    # Script Notificaciones Alarma
    - service: script.notifica_alarma
      data:
        variables:
          titulo: '*ATENCION ALARMA HUMO*'
          mensaje: >
            >>> URGENTE: SENSOR HUMO COCINA
#
# ALARMA AUTOMATICA SENSOR SENSOR AGUA ARQUETA
#
- id: X2_alarma_agua_arqueta
  alias: 'X1 Alarma Agua Arqueta'
  trigger:
    - platform: state
      entity_id: binary_sensor.water_leak_sensor_158d00045a3376
      from: 'off'
      to: 'on'
  action:
    # Micro Aviso Sirena Interior
    - service: script.sirena_alarma_micro_aviso

    # Script Envío Sonido Alexa Alexa
    - service: script.alexa_secuencia
      data_template:
        sonido: "{{ states('input_select.alarma_sonido_disparado') }}"
        repeticion: 5
        voz: 'ATENCION! ¡ALARMA AGUA ARQUETA!. Sensor Agua Arqueta. ¡ATENCION! ¡ALARMA!'

    # Script Notificación Alarma
    - service: script.notifica_alarma
      data:
        variables:
          titulo: '*ATENCION ALARMA AGUA*'
          mensaje: >
            >>> URGENTE: SENSOR AGUA ARQUETA BAÑO
#
# REGLA: ALARMA DISARMED A <ARMING>
#
- id: A0
  alias: 'A0 Alarma Disarmed to Pending'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      from: 'disarmed'
      to: 'arming'
  action:
    #- service: script.alarma_to_pending
    #  data_template:
    #    fromstate: '{{trigger.from_state.state}}'
    #    tostate: '{{trigger.to_state.state}}'
    #    ringtone_msg: 10005

    # Script Envío Sonido Alexa Alexa
    - service: script.alexa_secuencia_alarma_armado
      data_template:
        voz: "¡ATENCION!, alarma activada. Tiene un minuto para salir. ATENCION!, alarma activada. Salga ahora, por favor."
        sonido: "{{ states('input_select.alarma_sonido_desarmado') }}"

#
# REGLA: ALARMA ARMED A <PENDING>
#
- id: A1
  alias: 'A1 Alarma Armed to Pending'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      from: 'armed_home'
      to: 'pending'
    - platform: state
      entity_id: alarm_control_panel.ha
      from: 'armed_away'
      to: 'pending'
  action:
    #- service: script.alarma_to_pending
    #  data_template:
    #    fromstate: '{{trigger.from_state.state}}'
    #    tostate: '{{trigger.to_state.state}}'
    #    ringtone_msg: 10004

    # Script Notifica Evento Alarma Disparada
    - service: script.notifica_evento
      data_template:
        titulo: '*ALARMA HOMY*'
        mensaje: >
          >>> ESTADO: ATENCION AVISO PREVIO SALTO ALARMA

    # Script Envío Sonido Alexa Alexa
    - service: script.alexa_secuencia_alarma_desarmado
      data_template:
        voz: "¡ATENCION!, Alarma Disparada. Tiene un minuto para desarmar. ¡ATENCION!, Desarme ahora, por favor."
        sonido: "{{ states('input_select.alarma_sonido_desarmado') }}"

# REGLA: ARMADO AWAY COMPLETADO
#
- id: A2
  alias: 'A2 Alarma Armado Away OK'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      to: 'armed_away'
  action:
    # INICIALIZA EL SENSOR DEL TRIGGER
    - service: input_text.set_value
      entity_id: input_text.alarm_trigger
      data_template:
        value: " "
    # Aviso sonoro con Xiaomi GW
    #- service: script.sirena_xiaomi_play_alarm_armed

    # Script Envío Sonido Alexa Alexa
    - service: script.alexa_secuencia
      data_template:
        voz: "ATENCION!. Armado Total activado."
        sonido: "{{ states('input_select.alarma_sonido_armado') }}"
        repeticion: 2

    # Notifica Evento
    - service: script.notifica_evento
      data:
        titulo: '*ALARMA HOMY*'
        mensaje: >
          >>> ESTADO: ARMADO TOTAL (AWAY)
          >>> ACCION: Apagado Total Casa

    # Llamada a Script Apagado Casa
    - service: script.home_switch_off

    #- delay: 00:01:00
    # ARMADO PANEL ALARMA BLINK
    #- service: alarm_control_panel.alarm_arm_away
    #  entity_id: alarm_control_panel.blink_casa

#
# REGLA: ARMADO HOME COMPLETADO
#
- id: A3
  alias: 'A3 Alarma Armado Home OK'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      to: 'armed_home'
  action:
    # ALMACENA EL SENSOR DEL TRIGGER
    - service: input_text.set_value
      entity_id: input_text.alarm_trigger
      data_template:
        value: " "
    # Aviso sonoro con Xiaomi GW
    #- service: script.sirena_xiaomi_play_alarm_armed

    # Script Envío Sonido Alexa Alexa
    - service: script.alexa_secuencia
      data_template:
        voz: "ATENCION!. Armado parcial activado."
        sonido: "{{ states('input_select.alarma_sonido_armado') }}"
        repeticion: 2

    # Notifica Evento
    - service: script.notifica_evento
      data:
        titulo: '*ALARMA HOMY*'
        mensaje: >
          >>> ESTADO: ARMADO PARCIAL (HOME)


    # Revisar
    # https://community.home-assistant.io/t/automation-with-is-state-trigger-to-state-on-not-working/54691/2
    #        >>> MODO: "{{ trigger.to_state.state }}"

#
# REGLA: DESARMADO OK => SIRENA OFF, AVISO Y NOTIFICACION (DISARMED)
#
- id: A4
  alias: 'A4 Alarma Disarmed'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      to: 'disarmed'
  action:
    # SONOFF_SW1_SIRENA INTERIOR ==> OFF
    - service: switch.turn_off
      entity_id: switch.esphome_bas_sw0

    # DESARMADO PANEL ALARMA BLINK
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.blink_casa

    # Resetea el sensor del TRIGGER
    #- service: input_text.set_value
    #  entity_id: input_text.alarm_trigger
    #  data_template:
    #    value: " "

    #
    # Aviso sonoro con Xiaomi GW
    #- service: script.sirena_xiaomi_play_alarm_disarmed

    # Apaga Luz Piloto Gateway
    - service: light.turn_off
      entity_id: light.gateway_light_7811dcb788fa

    # Script Envío Sonido Alexa Alexa
    - service: script.alexa_secuencia
      data_template:
        voz: "ATENCION!. Alarma desactivada."
        sonido: "{{ states('input_select.alarma_sonido_desarmado') }}"
        repeticion: 1

    # Script Notificación Evento
    - service: script.notifica_evento
      data:
        titulo: '*ALARMA HOMY*'
        mensaje: >
          >>> ESTADO: Alarma Desactivada
#
# REGLA: TRIGGER SENSOR => MODO ARMADO AWAY => PENDING ==> ALARMA TRIGGERED
#
- id: A5
  alias: 'A5 Alarm Trigger Armed Away'
  trigger:
    # MUY IMPORTANTE: EN EL ARM AWAY SE CHEQUEA GRUPO SENSORES HOME + AWAY
    - platform: state
      entity_id:
      # - group.alarma_grp_sensores_home
      # - group.alarma_grp_sensores_away
      # Grupo Sensores Perimetrales
        - binary_sensor.door_window_sensor_158d00022b393c       # Puerta Entrada
        - binary_sensor.door_window_sensor_158d000201e2e7       # Puerta Salón
        - binary_sensor.door_window_sensor_158d00030996fc       # Ventana Estudio
        - binary_sensor.door_window_sensor_158d00020b7c27       # Ventana MFC
        - binary_sensor.door_window_sensor_158d00020457e0       # Ventana Plancha
        - binary_sensor.door_window_sensor_158d00020910b1       # Ventana AAF
        - binary_sensor.door_window_sensor_158d00045d69a6       # Ventana PAF
      # Grupo Sensores Away
        - binary_sensor.motion_sensor_158d0001e637f6            # Presencia Exterior
        - binary_sensor.motion_sensor_158d0002ea1d0f            # Presencia Dormitorio
        - binary_sensor.motion_sensor_158d0001e55903            # Presencia Entrada Interior
        - binary_sensor.motion_sensor_158d0001e464a6            # Presencia Estudio
        - binary_sensor.motion_sensor_158d0001e05661            # Presencia Salón
        - binary_sensor.door_window_sensor_158d00030996fc       # Ventana Estudio
        - binary_sensor.blink_puerta_garaje_motion_detected     # Blink Puerta Garaje
        - binary_sensor.blink_puerta_principal_motion_detected  # Blink Puerta Principal
        - binary_sensor.blink_entrada_motion_detected           # Blink Entrada Interior
      to: 'on'
    # Los sensores vibración solo saltan por trigger = event
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id:
          - binary_sensor.vibration_158d0002b15e3b # Rack Comunicaciones
          - binary_sensor.vibration_158d0002a4eacc # Puerta atras salon
        action_type: vibrate
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id:
          - binary_sensor.vibration_158d0002b15e3b # Rack Comunicaciones
          - binary_sensor.vibration_158d0002a4eacc # Puerta atras salon
        action_type: tilt
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: alarm_control_panel.ha
        state: armed_away
  action:
    #- service: python_script.meta_alarm_trigger
    #  data_template:
    #    entity_id: '{{trigger.entity_id}}'
    #
    # ALMACENA EL SENSOR DEL TRIGGER
    - service: input_text.set_value
      entity_id: input_text.alarm_trigger
      data_template:
        value: "{{ trigger.to_state.attributes.friendly_name }}"
    #
    # DISPARA LA ALARMA, que pasa a estado PENDING durante 60'
    # Si no se desactiva, pasa a triggered y se envían notificaciones y Sirena
    - service: alarm_control_panel.alarm_trigger
      entity_id: alarm_control_panel.ha

#
# REGLA: TRIGGER SENSOR => MODO ARMADO HOME => PENDING ==> ALARMA TRIGGERED
#
- id: A6
  alias: 'A6 Alarm Trigger Armed Home'
  trigger:
    - platform: state
      #entity_id: group.alarma_grp_sensores_home
      entity_id:
        - binary_sensor.door_window_sensor_158d00022b393c       # Puerta Entrada
        - binary_sensor.door_window_sensor_158d000201e2e7       # Puerta Salón
        #- binary_sensor.door_window_sensor_158d00030996fc       # Ventana Estudio
        - binary_sensor.door_window_sensor_158d00020b7c27       # Ventana MFC
        - binary_sensor.door_window_sensor_158d00020457e0       # Ventana Plancha
        - binary_sensor.door_window_sensor_158d00020910b1       # Ventana AAF
        - binary_sensor.door_window_sensor_158d00045d69a6       # Ventana PAF
      to: 'on'
    # Los sensores vibración solo saltan por trigger = event
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id: binary_sensor.vibration_158d0002a4eacc # Puerta atras salon
        action_type: vibrate
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id: binary_sensor.vibration_158d0002a4eacc # Puerta atras salon
        action_type: tilt
  condition:
    - condition: state
      entity_id: alarm_control_panel.ha
      state: armed_home
  action:
    # ALMACENA EL SENSOR DEL TRIGGER
    - service: input_text.set_value
      entity_id: input_text.alarm_trigger
      data_template:
        value: "{{ trigger.to_state.attributes.friendly_name }}"

    # DISPARA LA ALARMA, que pasa a estado PENDING durante 60'
    # Si no se desactiva, pasa a triggered y se envían notificaciones y Sirena
    - service: alarm_control_panel.alarm_trigger
      entity_id: alarm_control_panel.ha


# REGLA: ALARMA ARMED_AWAY TRIGGERED ==> SIRENA + NOTIFICACION COMPLETA
#
- id: A7
  alias: 'A7 Alarm Triggered'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.ha
      to: 'triggered'
  action:
    # Script Notificación Alarma
    - service: script.notifica_alarma
      data_template:
        titulo: '*ALARMA HOMY*'
        mensaje: >
          >>> ESTADO: ATENCION ALARMA DISPARADA

    # ALEXA SIRENAS ALARMA DISPARADA
    - service: script.alexa_secuencia_alarma_disparada

# REGLA: TRIGGER DESARMADO AUTOMATICO AL AMANECER
#
- id: A9
  alias: 'A9 Alarm Home Auto Disarm'
  trigger:
    - platform: sun
      event: sunrise
      offset: "-00:05:00"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: alarm_control_panel.ha
        state: armed_home
      # Hay alguien en casa
      - condition: state
        entity_id: binary_sensor.family_any_home
        state: 'on'
  action:
    # ALMACENA EL SENSOR DEL TRIGGER
    - service: input_text.set_value
      entity_id: input_text.alarm_trigger
      data_template:
        value: " "
    # Desarmado de Alarmas
    - service: alarm_control_panel.alarm_disarm
      data:
        entity_id: alarm_control_panel.ha
        code: !secret alarm_control_code
    #
    # Aviso sonoro con Xiaomi GW
    - service: script.sirena_stop_alarma
    # Notifica Evento
    - service: script.notifica_evento
      data:
        titulo: '*ALARMA HOMY*'
        mensaje: >
          >>> ESTADO: Desarmado automático al amanecer.

#
# REGLA: APAGADO BOTON PANICO
#
- id: A10
  alias: 'A10 Alarm Boton Panico Off'
  trigger:
    platform: state
    entity_id: input_boolean.panic_button
    from: 'on'
    to: 'off'
  action:
    # Llamada a script desactivado botón pánico.
    - service: script.alarma_boton_panico_off

#
# REGLA: BOTON APAGADO ESPHOME-SW1 ==> SIRENA OFF
#
- id: A11
  alias: 'A12 Alarm Sirena Interior Off'
  trigger:
    platform: state
    entity_id: binary_sensor.esphome_bas_sw0_boton
    from: 'off'
    to: 'on'
  action:
    # ESPHOME_SW1_SIRENA INTERIOR ==> OFF
    - service: switch.turn_off
      entity_id: switch.esphome_bas_sw0
    - service: light.toggle
      entity_id: light.esphome_bas_sw0_led

#-----------------------------------------------------------------------------#
#                                                                             #
# FAMILY TRACKING AT HOME: Control Home/Away                                  #
#                                                                             #
#-----------------------------------------------------------------------------#

- id: F01
  alias: 'F01 Family Away Armado Total'
  trigger:
    # Ya no hay nadie en casa
    platform: state
    entity_id: binary_sensor.family_any_home
    from: 'on'
    to: 'off'
  action:
    # Script Activación Alarma ARM AWAY
    - service: script.homy_armado_total
    # Delay para no bloquear notificaciones
    - delay: 0:05
    # Script Luces Apagado Total
    - service: script.luces_off

- id: F02
  alias: 'F02 Armado Parcial Midnight'
  trigger:
    - platform: time
      at: '00:30:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_any_home
        state: 'on'
      - condition: state
        entity_id: alarm_control_panel.ha
        state: disarmed
  action:
    - service: alarm_control_panel.alarm_arm_home
      entity_id: alarm_control_panel.ha

- id: F03
  alias: 'F03 Family Home Armado Home'
  trigger:
    # Versión original: Están todos en casa y Agu ha llegado
    - platform: state
      entity_id: binary_sensor.family_all_home
      from: 'off'
      to: 'on'
    #- platform: numeric_state
    #  entity_id: sensor.baye_probability_aaf
    #  above: 90
  condition:
    condition: and
    conditions:
      # Versión original: Están todos en casa y Agu ha llegado
      - condition: sun
        before: sunrise
      - condition: state
        entity_id: alarm_control_panel.ha
        state: disarmed
      - condition: time
        after: '00:30:00'
      - condition: state
        entity_id: binary_sensor.family_all_home
        state: 'on'
      #- condition: numeric_state
      #  entity_id: sensor.baye_probability_aaf
      #  above: 90
      # antes del amanecer
  action:
    # Notifica Evento
    - service: script.notifica_evento
      data:
        titulo: '*FAMILY HOME*'
        mensaje: >
          >>> EN 30' AUTO ARMADO HOME

    - delay: '00:30:00'
    - service: alarm_control_panel.alarm_arm_home
      entity_id: alarm_control_panel.ha

- id: F04
  alias: 'F04 Family Home Telegram'
  trigger:
    # Hay alguien en casa
    - platform: state
      entity_id: binary_sensor.family_any_home
      from: 'off'
      to: 'on'
  action:
    # Script encendido Luz piloto si es de noche
    - service: script.luces_on_family_home
    - service: script.notifica_evento
      data_template:
        titulo: '*FAMILY HOME: SI*'
        mensaje: >
          >>> EVENTO: Primero en Entrar {{ states('sensor.family_last_tracking') }}

- id: F05
  alias: 'F05 Family Home How Many Sleep'
  trigger:
    # Hay alguien en casa
    - platform: state
      entity_id:
        - input_boolean.family_sleep_home_mfc
        - input_boolean.family_sleep_home_acc
        - input_boolean.family_sleep_home_paf
        - input_boolean.family_sleep_home_aaf
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople

- id: F06
  alias: 'F06 Family MFC - Check Sleep'
  trigger:
    - platform: time
      at: '23:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_home_mfc
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_mfc
        state: 'off'
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople

    - service: input_boolean.turn_on
      entity_id: input_boolean.family_sleep_home_mfc
    # Notifica Evento
    - service: script.notifica_evento
      data:
        titulo: '*FAMILY HOME*'
        mensaje: >
          >>> Malen está en casa a las 23:00

          >>> Activado el control de Duerme en Casa.

- id: F07
  alias: 'F07 Family AAF - Check Sleep'
  trigger:
    - platform: time
      at: '23:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_home_aaf
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_aaf
        state: 'off'
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople

    - service: input_boolean.turn_on
      entity_id: input_boolean.family_sleep_home_aaf
    # Notifica Evento
    - service: script.notifica_evento
      data:
        titulo: '*FAMILY HOME*'
        mensaje: >
          >>> Agu está en casa a las 23:00

          >>> Activado el control de Duerme en Casa.

- id: F08
  alias: 'F08 Family PAF - Check Sleep'
  trigger:
    - platform: time
      at: '23:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_home_paf
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_paf
        state: 'off'
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople

    - service: input_boolean.turn_on
      entity_id: input_boolean.family_sleep_home_paf
    # Notifica Evento
    - service: script.notifica_evento
      data:
        titulo: '*FAMILY HOME*'
        mensaje: >
          >>> Paloma está en casa a las 23:00

          >>> Activado el control de Duerme en Casa.

- id: F09
  alias: 'F09 Family AAC - Check Sleep'
  trigger:
    - platform: time
      at: '23:00:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.family_home_aac
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_aac
        state: 'off'
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople

    - service: input_boolean.turn_on
      entity_id: input_boolean.family_sleep_home_paf
    # Notifica Evento
    - service: script.notifica_evento
      data:
        titulo: '*FAMILY HOME*'
        mensaje: >
          >>> Agustín está en casa a las 23:00

          >>> Activado el control de Duerme en Casa.

- id: F10
  alias: 'F09 Family Any Change - Actualiza Contador'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.family_home_aac
        - binary_sensor.family_home_mfc
        - binary_sensor.family_home_paf
        - binary_sensor.family_home_aaf
  action:
    # Llamada al contador de personas que actualiza sensor.family_home
    - service: python_script.countpeople

#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS DE CONTROL DE LUCES Y ALUMBRADO                                      #
#                                                                             #
#-----------------------------------------------------------------------------#
- id: L01
  alias: 'L01 Luces On Exterior Sunset'
  trigger:
      # offset: "+01:00:00"   # Horario Invierno GMT+1 - Enero
      # offset: "-00:30:00"   # Horario Invierno GMT+1
      # offset: "-00:00:00"   # Horario Verano GMT+2
    - platform: sun
      event: sunset
      offset: "-00:05"
  action:
    # Encendido Luces Exterior y Jardín
    - service: script.luces_exterior_on
    # Notifica a Familia
    - service: script.notifica_evento
      data:
        voz: 'Se va a poner el sol. Enciendo luces del jardín'
        titulo: '*ALUMBRADO*'
        mensaje: >
          >>> EVENTO: Puesta de Sol en 10'

          >>> LUCES: Alumbrado Exterior On

- id: L02
  alias: 'L02 Luces Off Exterior Medianoche'
  trigger:
    - platform: time
      at: '23:55:00'
  action:
    # Script Luces Exterior Off
    - service: script.luces_exterior_off
    # Notifica a Familia
    - service: script.notifica_evento
      data:
        voz: 'Es casi medianoche. Apago luces del jardín'
        titulo: '*ALUMBRADO*'
        mensaje: >
          >>> EVENTO: Casi Medianoche

          >>> LUCES: Alumbrado Exterior Off

- id: L04
  alias: 'L04 Luces On Salon Sunset'
  trigger:
    - platform: sun
      # offset: "-00:35:00"   # Horario Invierno GMT+1
      # offset: "-00:25:00"   # Horario Verano GMT+2
      event: sunset
      offset: "-00:25"
  condition:
    condition: and
    conditions:
        # Hay alguien en casa
      - condition: state
        entity_id: binary_sensor.family_any_home
        state: 'on'
      - condition: numeric_state
        entity_id: sensor.illumination_158d0001e05661
        below: 50
  action:
    - service: light.turn_on
      entity_id: light.luz_vitrina
    # Notifica a Familia
    - service: script.notifica_evento
      data:
        titulo: '*ALUMBRADO*'
        mensaje: >
          >>> EVENTO: Puesta de Sol en breve

          >>> LUCES: Alumbrado Luz Salón On

#
# La regla de alumbrado exterior según sensor se simplifica para que se encienda por la noche, siempre que esté oscuro.
# La idea es que por programacion horaria y puesta de sol la regla de encendido en la puesta de sol encienda y mantenga
# encendida las luces hasta al menos las 23.55.
# A partir de esa hora se apagan las luces y entraria a funcionar esta regla,
# de forma que al pasar alguien por la entrada si está oscuro, encienda los faroles exterior.
# Se elimina la notificación Telegram.
  #
- id: L05
  alias: 'L05 Luces On Exterior Segun Sensor'
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e637f6
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sun.sun
        state: 'below_horizon'
      - condition: state
        entity_id: light.sonoff_mini_sw1
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.illumination_158d0001e637f6
        below: 10
  action:
    - service: light.turn_on
      entity_id: light.sonoff_mini_sw1
    - delay: '00:05:00'
    - service: light.turn_off
      entity_id: light.sonoff_mini_sw1

- id: L06
  alias: 'L06 Luces Off Before Sunrise'
  trigger:
    - platform: time
      at:
        - "02:00:00"
        - "03:30:00"
        - "04:00:00"
        - "05:00:00"
        - "06:00:00"
        - "07:00:00"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: group.luces_interior_grp # Luces interior
        state: 'on'
      - condition: state
        entity_id: group.luces_jardin_grp # Luces exterior
        state: 'on'
  action:
    # Apagado Luces Casa
    - service: script.luces_off

- id: L07
  alias: 'L07 Luces On Entrada Según Sensor'
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e55903
      to: 'on'
    - platform: state
      entity_id: binary_sensor.door_window_sensor_158d00022b393c
      to: 'on'
  condition:
    condition: or  # 'when dark' condition: either after sunset or before sunrise
    conditions:
      - condition: sun
        # after_offset: "-01:00:00"  ==> HORARIO INVIERNO GMT+1
        # after_offset: "-00:30:00"  ==> HORARIO VERANO GMT+2
        after: sunset
        after_offset: "-00:30:00"
      - condition: sun
        before: sunrise
        # en el amanecer +3h'
        before_offset: "+03:00:00"
  action:
    #- service: automation.turn_off
    #  entity_id: automation.l07_luces_on_entrada_segun_sensor
    # Luces Entrada ON
    - service: light.turn_on
      entity_id: light.luz_entrada
      data:
        brightness: 120
        rgb_color: [254, 0, 0]
    # Si Alarm.Armed_Home => Piloto ON
    - service: script.luz_on_armed_home
    # Espera de 5'
    - delay: '00:05:00'
    # Luces Entrada OFF
    - service: light.turn_off
      entity_id:
        - light.luz_entrada
        - light.gateway_light_7811dcb788fa
    #
    #- service: automation.turn_on
    #  entity_id: automation.l07_luces_on_entrada_segun_sensor

- id: L08
  alias: 'L08 Luces On Dormitorio Según Sensor'
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0002ea1d0f
      to: 'on'
  condition:
    condition: and
    conditions:
      # siempre que la luz no esté ya encendida
      - condition: state
        entity_id: light.dormitorio
        state: 'off'
      # 'when dark' condition: either after sunset or before sunrise
      - condition: sun
        after: sunset
        after_offset: "+01:00:00"
      - condition: sun
        # before_offset: "+02:00:00"  ==> Horario Invierno GMT+1, en el amanecer -2h
        # before_offset: "+00:30:00" ==> Horario Verano GMT+2, el amanecer -30m
        before: sunrise
        before_offset: "+02:00:00"
  action:
    # Regla Off
    #- service: automation.turn_off
    #  entity_id: automation.l08_luces_on_dormitorio_segun_sensor
    # Luces On
    - service: script.luces_dormitorio_relax
    # Espera de 5'
    - delay: '00:05:00'
    # Luces Off
    - service: light.turn_off
      entity_id: light.dormitorio
    # Regla On
    #- service: automation.turn_on
    #  entity_id: automation.l08_luces_on_dormitorio_segun_sensor

- id: L09
  alias: 'L09 Luces On Dormitorio Warning'
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0002ea1d0f       # Sensor Dormitorio
      to: 'on'
    - platform: state
      entity_id: binary_sensor.door_window_sensor_158d00022b393c  # Puerta Entrada
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e637f6       # Sensor Exterior
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e55903       # Sensor Entrada
      to: 'on'
  condition:
    condition: and
    conditions:
      # Dormitorio Warning F-Mode = on
      - condition: state
        entity_id: input_boolean.dormitorio_warning
        state: 'on'
      - condition: sun
        after: sunset
  action:
    # Luces On
    - service: script.luces_dormitorio_relax
    - delay: '00:00:10'
    - service: light.turn_off
      entity_id: light.dormitorio
      data:
        transition: 10

- id: L10
  alias: 'L10 Luces On Estudio Según Sensor'
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001e464a6
      to: 'on'
  condition:
    condition: or
    conditions:
      # https://www.home-assistant.io/docs/scripts/conditions/
      #
      # si el sensor de luz está es < 3 lumx
      #- condition: numeric_state
      #  entity_id: sensor.illumination_158d0001e464a6
      #  below: 2
      # 'when dark' condition: either after sunset or before sunrise
      - condition: sun
        after: sunset
        after_offset: "+01:00:00"
      - condition: sun
        # before_offset: "+02:00:00"  ==> Horario Invierno GMT+1, en el amanecer -2h
        # before_offset: "+00:30:00" ==> Horario Verano GMT+2, el amanecer -30m
        before: sunrise
        before_offset: "+01:00:00" # Horario Invierno GMT+1, en el amanecer +60m
  action:
    # Luces On
    - service: hue.hue_activate_scene
      data:
        group_name: "Estudio"
        scene_name: "Top"
    # Encendido indivicual
    # - service: light.turn_on
    #   entity_id: light.luz_estudio
    #   data:
    #     brightness: 175
    #     rgb_color: [254, 200, 145]
    # - service: light.turn_on
    #   entity_id: light.esphome_lb1_l01
    #   data:
    #     white_value: 200
    #     rgb_color: [254, 126, 0]
    #     brightness: 255
    # - service: light.turn_on
    #   entity_id: light.sonoff_mini_sw2

#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS MAGIC CUBE                                                           #
#                                                                             #
#-----------------------------------------------------------------------------#
#
# Available events are flip90, flip180, move, tap_twice, shake_air, swing, alert,
# free_fall and rotate.
# The component stores the last action as the attribute last_action.
#

- id: L12
  alias: 'L12 Cube FreeFall Light Estudio On'
  mode: restart
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00024a4a62
      action_type: free_fall
  action:
    - service: script.luces_estudio_top

- id: L13
  alias: 'L13 Cube Shake Light off'
  mode: restart
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00024a4a62
      action_type: shake_air
  action:
    - service: script.luces_estudio_off

- id: L14
  alias: 'L14 Cube Flip90 Light Desk Toggle'
  mode: restart
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00024a4a62
      action_type: flip90
  action:
    - service: light.toggle
      entity_id: light.sonoff_mini_sw2
    - delay: 3

- id: L15
  alias: 'L15 Cube Rotate Light Rack'
  mode: restart
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00024a4a62
      action_type: move
  action:
    - service: switch.toggle
      entity_id: switch.esphome_bas_sw1



#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS DE CONTROL DE SMART SWITCH ESPHOME                                   #
#                                                                             #
#-----------------------------------------------------------------------------#

#
# ESPHOME 4CH - JARDIN
#
- id: S01
  alias: 'S01 Sonoff 4CH Boton1 On'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_4ch_button_1
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_4ch_relay_1

- id: S02
  alias: 'S02 Sonoff 4CH Boton2 On'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_4ch_button_2
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_4ch_relay_2

- id: S03
  alias: 'S03 Sonoff 4CH Boton3 On'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_4ch_button_3
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_4ch_relay_3

- id: S04
  alias: 'S04 Sonoff 4CH Status'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_4ch_status
      from: 'on'
      to: 'off'
      for: '00:05:00'
  action:
    # Script Notificación Alarma
    - service: script.notifica_alarma
      data:
        voz: 'Fallo Eléctrico. Cuadro del Jardín sin corriente eléctrica'
        titulo: '*AVISO FALLO ELECTRICO*'
        mensaje: >
          >>> URGENTE: CUADRO ELECTRICO JARDIN SIN CORRIENTE

          >>> DISPOSITIVO: ESPHOME SONOFF 4CH SW1

- id: S05
  alias: 'S05 Sonoff POW Status'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_pow_sw3_status
      from: 'on'
      to: 'off'
      for: '00:05:00'
  action:
    # Script Notificación Alarma
    - service: script.notifica_alarma
      data:
        #voz: 'Fallo Eléctrico. Cuadro depuradora piscina sin corriente eléctrica'
        titulo: '*AVISO FALLO ELECTRICO*'
        mensaje: >
          >>> URGENTE: CUADRO ELECTRICO DEPURADORA PISCINA SIN CORRIENTE

          >>> DISPOSITIVO: ESPHOME SONOFF POW_SW3

# ESPHOME POW - DEPURADORA PISCINA
#
- id: S06
  alias: 'S06 Timer Piscina Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.piscina_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.piscina_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.piscina_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.piscina_programador_dias
        state: 'on'
  action:
    # Timer Programador Diario Piscina
    - service: script.piscina_timer_start_diario

- id: S07
  alias: 'S07 Timer Piscina End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.piscina
  action:
    # Inicia el Timer de la Piscina
    - service: script.piscina_timer_cancel
    # Actualiza Valor Duración Programa Activo
    - service: input_text.set_value
      entity_id: input_text.piscina_duracion_programa
      data_template:
        value: ''

- id: S08
  alias: 'S08 Set Hora Final Planificado'
  trigger:
    - platform: state
      entity_id: sensor.piscina_diario_endtime
    - platform: state
      entity_id: sensor.piscina_duracion_planificada
  action:
    # Actualiza Valor input_datetime.piscina_end_time
    - service: input_datetime.set_datetime
      entity_id: input_datetime.piscina_end_time
      data_template:
        time: '{{ states.sensor.piscina_diario_endtime.state }}'

# ESPHOME S20 - SW1 Smart Pluh Dormitorio Principal
#

- id: S09
  alias: 'S09 Sonoff S20 SW1 Toggle'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_s20_sw1_boton
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_s20_sw1

- id: S09b
  alias: 'S09b Sonoff S20 SW3 Toggle'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_s20_sw3_boton
      from: 'off'
      to: 'on'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_s20_sw3

- id: S10
  alias: 'S10 Switch Dormitorio MFC On'
  trigger:
    - platform: sun
      # offset: "+03:30:00"   # Horario Invierno GMT+1  => 18:30 + 3:30 = 22:00
      # offset: "+00:30:00"   # Horario Verano GMT+2  => 21:30 + 0:30 = 22:00
      event: sunset
      offset: "+03:30:00"
    #- platform: sun  # solo para calefacción
    #  event: sunrise
    #  offset: "-02:00:00"
  condition:
    condition: and
    conditions:
      # Hay alguien en casa
      - condition: state
        entity_id: input_boolean.calefac_programador_mfc
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_mfc
        state: 'on'
      - condition: state
        entity_id: binary_sensor.family_any_home
        state: 'on'
  action:
    - service: switch.turn_on
      entity_id: switch.esphome_s20_sw1

- id: S11
  alias: 'S11 Switch Dormitorio PAF On'
  trigger:
    - platform: sun
      # offset: "+03:30:00"   # Horario Invierno GMT+1  => 18:30 + 3:30 = 22:00
      # offset: "+00:30:00"   # Horario Verano GMT+2  => 21:30 + 0:30 = 22:00
      event: sunset
      offset: "+03:30:00"
    - platform: sun  # solo para calefacción
      event: sunrise
      offset: "-02:00:00"
  condition:
    condition: and
    conditions:
      # Hay alguien en casa
      - condition: state
        entity_id: input_boolean.calefac_programador_mfc
        state: 'on'
      - condition: state
        entity_id: input_boolean.family_sleep_home_mfc
        state: 'on'
      - condition: state
        entity_id: binary_sensor.family_any_home
        state: 'on'
  action:
    - service: switch.turn_on
      entity_id: switch.esphome_s20_sw3

- id: S12
  alias: 'S12 Switch Dormitorios Off'
  trigger:
    #- platform: time # Solo Invierno Calefacción
    #  at: '01:00:00'
    - platform: sun
      event: sunrise
      offset: "-00:30:00"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: switch.esphome_s20_sw1
        state: 'on'
      - condition: state
        entity_id: switch.esphome_s20_sw3
        state: 'on'
  action:
    - service: switch.turn_off
      entity_id: switch.esphome_s20_sw1
    - service: switch.turn_off
      entity_id: switch.esphome_s20_sw3

#
# ESPHOME BASIC SW2 PORCHE PISCINA
#
- id: S13
  alias: 'S13 Sonoff SW2 Porche Piscina'
  trigger:
    platform: state
    entity_id: binary_sensor.esphome_bas_sw1_boton
    from: 'off'
    to: 'on'
  action:
    # ESPHOME_SW2 ==> OFF
    - service: switch.toggle
      entity_id: switch.esphome_bas_sw1
    - service: light.toggle
      entity_id: light.esphome_bas_sw1_led

#
# ESPHOME BASIC SW4 PORCHE SALON
#
- id: S14
  alias: 'S14 Sonoff SW4 Porche Piscina'
  trigger:
    platform: state
    entity_id: binary_sensor.esphome_bas_sw4_boton
    from: 'off'
    to: 'on'
  action:
    # ESPHOME_SW4 ==> OFF
    - service: switch.toggle
      entity_id: switch.esphome_bas_sw4
    - service: light.toggle
      entity_id: light.esphome_bas_sw4_led

#
# SAI RACK COMUNICACIONES
#
- id: S15
  alias: 'S15 ups apc700 status'
  trigger:
    - platform: state
      entity_id: binary_sensor.ups_status
      from: 'on'
      to: 'off'
      for: '00:00:10'
  action:
    # Script Notificación Alarma
    - service: script.notifica_alarma
      data:
        voz: 'Fallo Eléctrico. Cuadro rack estudio sin corriente eléctrica'
        titulo: '*AVISO FALLO ELECTRICO*'
        mensaje: >
          >>> URGENTE: SAI RACK COMUNICACIONES SIN CORRIENTE

# ESPHOME POW R2 SW2 - LAVADORA
#
- id: S16
  alias: 'S16 Sonoff POW Lavadora Boton Switch on'
  trigger:
    platform: state
    entity_id: binary_sensor.esphome_pow_sw2_boton
    from: 'off'
    to: 'on'
    for: '00:00:02'
  action:
    - service: switch.toggle
      entity_id: switch.esphome_pow_sw2

- id: S17
  alias: 'S17 Sonoff POW Lavadora Led'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_pow_sw2_lavadora_lavando
  action:
    - service: light.toggle
      entity_id: light.esphome_pow_sw2_led

- id: S18
  alias: 'S18 Sonoff POW Lavadora Warning off'
  trigger:
    - platform: state
      entity_id: binary_sensor.esphome_pow_sw2_lavadora_warning
      from: 'off'
      to: 'on'
  action:
    - service: script.lavadora_switch_off
    #- service: script.alexa_secuencia
    #  data_template:
    #    sonido: 'clock_01'
    #    repeticion: 1
    #    voz: >
    #      {% if states.weather.dark_skynow.state | string == 'rainy' %}
    #        "Hola, el lavado ha terminado, pero hay previsión de lluvia. Deberías usar la secadora"
    #      {% else %}
    #        "Hola, el lavado ha terminado y el tiempo es bueno. Puedes tender la ropa"
    #      {% endif %}

# ESPHOME 4CH-R2 SW2 RIEGO BONSAIS Relay1 - Relay4
#
# https://community.home-assistant.io/t/timer-execute-and-action-from-lovelace-ui/123512
# https://community.home-assistant.io/t/lovelace-irrigation-card-help-needed/67667/2
#
- id: S19
  alias: 'S19 Timer Riego CH1 Start Tramo1'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_ch1_start_time_t1.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: state
    entity_id: binary_sensor.riego_ch1_dia_ejecucion_t1  # Sensor del programador on/off
    state: 'on'
  action:
    # Timer Programador Diario
    - service: timer.start
      data_template:
        entity_id: timer.riego_ch1
        duration: '{{ states.sensor.riego_ch1_duracion_planificada.state|int * 60}}'
    - service: switch.turn_on
      entity_id: switch.esphome_4ch_sw2_relay_1

- id: S19b
  alias: 'S19 Timer Riego CH1 Start Tramo2'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_ch1_start_time_t2.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: state
    entity_id: binary_sensor.riego_ch1_dia_ejecucion_t2  # Sensor del programador on/off
    state: 'on'
  action:
    # Timer Programador Diario
    - service: timer.start
      data_template:
        entity_id: timer.riego_ch1
        duration: '{{ states.sensor.riego_ch1_duracion_planificada_t2.state|int * 60}}'
    - service: switch.turn_on
      entity_id: switch.esphome_4ch_sw2_relay_1

- id: S20
  alias: 'S20 Timer Riego CH1 End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.riego_ch1
  action:
    - service: script.riego_ch1_timer_cancel

- id: S21
  alias: 'S21 Timer Riego CH2 Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_ch2_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.riego_ch2_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.riego_ch2_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.riego_ch1_programador_dias
        state: 'on'
  action:
    # Timer Programador Diario
    - service: timer.start
      data_template:
        entity_id: timer.riego_ch2
        duration: '{{ states.sensor.riego_ch2_duracion_planificada.state|int * 60}}'
    - service: switch.turn_on
      entity_id: switch.esphome_4ch_sw2_relay_2

- id: S22
  alias: 'S22 Timer Riego CH2 End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.riego_ch2
  action:
    - service: script.riego_ch2_timer_cancel

- id: S23
  alias: 'S23 Timer Fuente CH3 Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_ch3_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.riego_ch3_programador  # Sensor del programador on/off
        state: 'on'
      - condition: state
        entity_id: binary_sensor.riego_ch3_dia_ejecucion  # Sensor que indica si es día de ejecución en función de la lista input_select.riego_ch1_programador_dias
        state: 'on'
  action:
    # Timer Programador Automático
    - service: timer.start
      data_template:
        entity_id: timer.riego_ch3
        duration: '{{ states.sensor.riego_ch3_duracion_planificada.state|int * 60}}'
    - service: switch.turn_on
      entity_id: switch.esphome_4ch_sw2_relay_3


- id: S24
  alias: 'S24 Timer Fuente CH3 End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.riego_ch3
  action:
    - service: script.riego_ch3_timer_cancel

- id: S25
  alias: 'S25 Timer Riego Zona2_t1 Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_sw2_start_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: state
    entity_id: binary_sensor.riego_sw2_dia_ejecucion_t1  # Sensor del programador on/off
    state: 'on'
  action:
    # Timer Programador Automático
    - service: timer.start
      data_template:
        entity_id: timer.riego_sw2
        duration: '{{ states.sensor.riego_sw2_duracion_planificada.state|int * 60 }}'
    - service: switch.turn_on
      entity_id: switch.esphome_bas_sw2

- id: S26
  alias: 'S26 Timer Riego Zona2_T2 SW2 Start'
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.riego_sw2_start_time2.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: state
    entity_id: binary_sensor.riego_sw2_dia_ejecucion_t2  # Sensor del programador on/off
    state: 'on'
  action:
    # Timer Programador Automático
    - service: timer.start
      data_template:
        entity_id: timer.riego_sw2
        duration: '{{ states.sensor.riego_sw2_duracion_planificada_t2.state|int * 60 }}'
    - service: switch.turn_on
      entity_id: switch.esphome_bas_sw2

- id: S27
  alias: 'S27 Timer Riego Zona2_T2 SW2 End'
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.riego_sw2
  action:
    - service: script.riego_sw2_timer_cancel

- id: S28
  alias: 'S28 Control Jardin Before Sunrise'
  trigger:
    - platform: time
      at: "00:00:00"
    - platform: time
      at: "01:00:00"
    - platform: time
      at: "02:00:00"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: switch.esphome_4ch_sw2_relay_1
        state: 'on'
      - condition: state
        entity_id: switch.esphome_4ch_sw2_relay_2
        state: 'on'
      - condition: state
        entity_id: switch.esphome_4ch_sw2_relay_3
        state: 'on'
      - condition: state
        entity_id: switch.esphome_pow_sw3
        state: 'on'
  action:
    # Apagado Luces Casa
    - service: script.jardin_off
    # Notifica a Familia
    - service: script.notifica_evento
      data:
        titulo: '*JARDIN: OFF*'
        mensaje: >
          >>> EVENTO: Control Riego/Fuentes encendidas antes del amanecer
          >>> JARDIN: Apagado total


#-----------------------------------------------------------------------------#
#                                                                             #
#REGLAS DE CONTROL DE PING DEVICES BINARY SENSOR                             #
#                                                                             #
#-----------------------------------------------------------------------------#

#
# ping_01_router_fibra_movistar:
#
- id: P01
  alias: 'P01_ping_router_fibra'
  trigger:
    - platform: state
      entity_id: binary_sensor.ping_00_wan_internet_google
      from: 'on'
      to: 'off'
      for: '00:01:00'
  action:
    # Script Notificación Alarma
    - service: script.notifica_alarma
      data:
        voz: 'Fallo Conectividad a Internet. Router sin salida a internet'
        titulo: '*CONEXION INTERNET*'
        mensaje: >
          >>> URGENTE: ERROR CONEXION INTERNET

          >>> DISPOSITIVO: 00 WAN ROUTER FIBRA

#
#ping_05_router_wifi_tplink:
#
- id: P02
  alias: 'P02_ping_ap_wifi_tplink'
  trigger:
    - platform: state
      entity_id: binary_sensor.ping_05_router_wifi_tplink
      from: 'on'
      to: 'off'
      # for: '00:06:00'
  action:
    # Script Notificación Alarma
    - service: script.notifica_alarma
      data:
        voz: 'Fallo Conectividad. Punto de acceso wifi no accesible'
        titulo: '*AVISO ERROR CONECTIVIDAD'
        mensaje: >
          >>> URGENTE: FALLO DE PING

          >>> DISPOSITIVO: 05 AP WIFI TPLINK

#
#nmap_sony_ps4:
#
- id: P03
  alias: 'P03_sony_ps4_on'
  trigger:
    - platform: state
      entity_id: binary_sensor.nmap_sony_ps4_lan_wifi
      from: 'off'
      to: 'on'
  action:
    # Script Notificación Alarma
    - service: script.notifica_evento
      data:
        titulo: '*AVISO CONSOLA PS4*'
        mensaje: >
          >>> AVISO: ENCENDIDO

          >>> DISPOSITIVO: CONSOLA SONY PS4

#
# nmap_sony_ps4:
#
- id: P04
  alias: 'P04_sony_ps4_off'
  trigger:
    - platform: state
      entity_id: binary_sensor.nmap_sony_ps4_lan_wifi
      from: 'on'
      to: 'off'
  action:
    # Script Notificación Alarma
    - service: script.notifica_evento
      data:
        titulo: '*AVISO CONSOLA PS4*'
        mensaje: >
          >>> AVISO: APAGADO

          >>> DISPOSITIVO: CONSOLA SONY PS4

#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS DE AUTOMATIZACION CON TAGS NFC                                       #
#                                                                             #
#-----------------------------------------------------------------------------#
- id: T00
  alias: 'NFC Home Blue Tag - Armado Away'
  trigger:
    - platform: tag
      tag_id: 2C-CA-F0-22
  action:
    - service: alarm_control_panel.alarm_arm_away
      data:
        entity_id: alarm_control_panel.ha
        code: !secret alarm_control_code

- id: T01
  alias: 'NFC AAC Tag Alarma Desarmado'
  trigger:
    - platform: tag
      tag_id: 04-50-B6-01-25-3B-03 # AAC Green Taf
  action:
    # Desarmado de Alarma
    - service: alarm_control_panel.alarm_disarm
      data:
        entity_id: alarm_control_panel.ha
        code: !secret alarm_control_code

- id: T02
  alias: 'NFC MFC Tag Alarma Desarmado'
  trigger:
    - platform: tag
      tag_id: 04-50-4F-01-B5-1D-03 # Malen Red Tag
  action:
    # Desarmado de Alarma
    - service: alarm_control_panel.alarm_disarm
      data:
        entity_id: alarm_control_panel.ha
        code: !secret alarm_control_code

- id: T03
  alias: 'NFC AAF Tag Alarma Desarmado'
  trigger:
    - platform: tag
      tag_id: 04-50-9A-01-7D-1D-03 # AAF Red Tag
  action:
    # Desarmado de Alarma
    - service: alarm_control_panel.alarm_disarm
      data:
        entity_id: alarm_control_panel.ha
        code: !secret alarm_control_code

- id: T04
  alias: 'NFC PAF Tag Alarma Desarmado'
  trigger:
    - platform: tag
      tag_id: 04-50-B3-01-0D-3B-03 # PAF Red Tag
  action:
    # Desarmado de Alarma
    - service: alarm_control_panel.alarm_disarm
      data:
        entity_id: alarm_control_panel.ha
        code: !secret alarm_control_code

- id: T05
  alias: 'NFC Tag Credit Card Botón Pánico'
  trigger:
    - platform: tag
      tag_id: 79-D5-0A-8F # Tag Credit Card
  action:
    # BOTON DEL PANICO: Secuencia Alexa ALARMA
    - service: input_boolean.turn_on
      entity_id: input_boolean.panic_button
    - service: script.alarma_boton_panico

#-----------------------------------------------------------------------------#
#                                                                             #
# REGLAS DE AUTOMATIZACION ACCIONES IOS                                       #
#                                                                             #
#-----------------------------------------------------------------------------#
- id: I01
  alias: 'IOS Action Luz Salon'
  initial_state: true
  trigger:
    - platform: event
      event_type: ios.action_fired
      event_data:
        actionName: 'luz_salon'
  action:
    - service: light.toggle
      entity_id: light.salon

- id: I02
  alias: 'IOS Action Luz Estudio'
  initial_state: true
  trigger:
    - platform: event
      event_type: ios.action_fired
      event_data:
        actionName: 'luz_estudio'
  action:
    - service: light.toggle
      target:
        area_id: c87f1d973bb247848d28bbe4be4c0a95   # Área Estudio

- id: I03
  alias: 'IOS Action Alarma Off'
  initial_state: true
  trigger:
    - platform: event
      event_type: ios.action_fired
      event_data:
        actionName: 'alarma_off'
  action:
    # Desarmado de Alarmas
    - service: alarm_control_panel.alarm_disarm
      data:
        entity_id: alarm_control_panel.ha
        code: !secret alarm_control_code


- id: I04
  alias: 'IOS Action Alarma Away'
  initial_state: true
  trigger:
    - platform: event
      event_type: ios.action_fired
      event_data:
        actionName: 'alarma_armado_total'
  action:
    # Desarmado de Alarmas
    - service: alarm_control_panel.alarm_arm_away
      data:
        entity_id: alarm_control_panel.ha
        code: !secret alarm_control_code
